#!/bin/bash

# (Re)Start the server.

# Check for the main env var.
if [[ -z $HEXCALC ]]; then
   echo "Environment variable HEXCALC must be defined to run this script."
   echo "Do you want to run sudo startAsRoot?"
   exit 1
fi

source $HEXCALC/ops/config.sh

PROTECTED_PORT=false
if [ "$PORT" = "443" ] || [ "$PORT" = "80" ]; then
    PROTECTED_PORT=true
fi
if [ $USER != "root" ] && [ "$PROTECTED_PORT" == true ]; then
    echo "You must start the server as root on port 80 or 443."
    exit 1
elif [ $USER == "root" ] && [ "$PROTECTED_PORT" != true ]; then
    echo "Exiting, you don't want to start as root on port $PORT."
    exit 1
fi

# Stop.
echo "Stopping any existing server processes."
$HEXCALC/bin/stop
STOP_ERROR=$?
if [ $STOP_ERROR != 0 ]; then
    echo "Restart exiting due to stop not completing."
    exit 1
fi

# Check for any server processes running.
$HEXCALC/bin/checkProc
RUNNING=$?
if [ $RUNNING == 1 ]; then
    echo "There is a uwsgi server running. Stop the server before starting it."
    $HEXCALC/bin/showProc
    exit 0
fi

# Base arguments for uwsgi.
BASEARGS='--master --processes 2 --threads 100 --callable app --wsgi-file '$HEXCALC/www/www.py' --uid '$HEX_UID' --gid '$HEX_GID

# Socket arguments for uwsgi.
if [ $USE_HTTPS == 1 ]; then
    if [ "$PROTECTED_PORT" = true ]; then

        # https, protected port
        SOCKETARGS='--shared-socket '$WWW_SOCKET' --https =0,'$CERT,$KEY,HIGH,$CA
    else
        # https, unprotected port, assuming non-root
        SOCKETARGS='--https-socket '$WWW_SOCKET,$CERT,$KEY,HIGH,$CA
    fi
else
    if [ "$PROTECTED_PORT" = true ]; then
        # http, protected port
        SOCKETARGS='--shared-socket '$WWW_SOCKET' --http =0'
    else
        # http, unprotected port
        SOCKETARGS='--http-socket '$WWW_SOCKET
    fi
fi

if [ $BACK_OR_FOREGROUND == "FORE" ]; then

    echo Starting in foreground
    uwsgi $BASEARGS $SOCKETARGS
    exit 0
fi

# Save previous log file.
TIME=$(date '+%F-%T')
LOG=$HEXCALC/ops/log
touch $LOG
mv $LOG $HEXCALC/ops/logsPrev/$TIME
rm -f $HEXCALC/nohup.out  >/dev/null 2>&1

# Start the server.
echo starting...
rm -q $HEXCALC/nohup.out  >/dev/null 2>&1
LOGARGS=' --logto2 '$HEXCALC/ops/log
nohup uwsgi $BASEARGS $SOCKETARGS $LOGARGS &

# Allow the processes to start, change the owner on some files & verify.
# Loop until there is a server process.
sleep 5
for i in {1..5}
do
    $HEXCALC/bin/checkProc
    RUNNING=$?
    if [ $RUNNING == 1 ]; then
        break
    fi
    sleep 3
done

if [ $RUNNING == 0 ]; then
    echo 'Error: giving up waiting for server to start.'
    exit 1
fi

if [ "$PROTECTED_PORT" = true ]; then
    chown $HEX_UID:$HEX_GID $HEXCALC/nohup.out $HEXCALC/ops/logsPrev/$TIME
fi
$HEXCALC/bin/showProc
exit 0
