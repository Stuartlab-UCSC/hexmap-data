#!/bin/bash
# Run a test after setting the path
# $1: config file in compute/config
# $2: name of test(s) to run, one of:
#     / all / docker_save / web /
source $1
TO_RUN=$2

export DATA_ROOT=$TEST_DATA_ROOT
if [ -z ${TO_RUN} ]; then
    TO_RUN=all
fi

# If the python environment is present then open it up.
if [ -e $PYENV/bin/activate ]; then
    source $PYENV/bin/activate
fi

export UNIT_TEST=1  # Suppress all log messages so we only see test messages.
export DEBUG=1

# Test only the *_web_tests.py files
web=( \
    test_basic_www \
    test_placeNode_web \
)

# Deprecated with hexagram server code moving to the compute server
DEPRECATED=( \
    test_http \
)

# Deprecated with hexagram server code moving to the compute server
DEPRECATED_PARALLEL=( \
    test_http_parallel \
    test_remoteCalc \
)

# The rest of the tests.
docker_safe=( \
    test_dynLayoutAware \
    test_formatCheck \
    test_layoutBasic \
    test_layoutBasicMakeUI \
    test_layoutBasicMakeUIInferFormat \
    test_layoutMetaData \
    test_layoutZeroReplace \
    test_placeNode2_web \
    test_process_categoricals \
    test_sim6Layout \
    test_similarity \
    test_stats \
    # NOTE: alphabetical order to make it easier to find tests
)

# Combine the lists above to get ALL of the tests
all=( "${web[@]}" "${DEPRECATED[@]}" "${DEPRECATED_PARALLEL[@]}" "${docker_safe[@]}" )

# local mac tests are those that normally pass on a mac
mac=( \
    test_basic_www \
    test_dynLayoutAware \
    test_http \
    test_layoutMetaData \
    test_placeNode_web \
    test_placeNode2_web \
    test_remoteCalc \
    test_similarity \
)

# this really needs selenium rather than manually building maps from the UI
    #test_createMapUi \

if [ $TO_RUN == 'all' ]
    then RUN_THIS="${all[@]}"
elif [ $TO_RUN == 'docker_safe' ]
    then RUN_THIS="${docker_safe[@]}"
elif [ $TO_RUN == 'web' ]
    then RUN_THIS="${web[@]}"
elif [ $TO_RUN == 'mac' ]
    then RUN_THIS="${mac[@]}"
fi
echo 'TO_RUN:' $TO_RUN
echo 'RUN_THIS:' $RUN_THIS

# Run our well-behaved tests in parallel
python2.7 -m unittest $RUN_THIS

# Run our parallel-challenged tests independently
if [ $TO_RUN == 'all' ]
    then
    echo Running parallel-challenged tests independently
    for TEST in "${DEPRECATED_PARALLEL[@]}"
    do
        python2.7 $TEST.py
    done
fi
